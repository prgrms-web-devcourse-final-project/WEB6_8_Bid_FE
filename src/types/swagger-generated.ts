/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
    "/notifications/{id}/read": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        /**
         * 알림 읽음 처리
         * @description 특정 알림을 읽음 상태로 변경.
         */
        put: operations["markAsRead"];
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/notifications/read-all": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        /**
         * 모든 알림 읽음 처리
         * @description 사용자의 모든 알림을 읽음 상태로 변경.
         */
        put: operations["markAllAsRead"];
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/products/{productId}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * 상품 상세 조회
         * @description 상품을 ID로 조회합니다.
         */
        get: operations["getProduct"];
        /**
         * 상품 수정
         * @description 상품 정보를 수정합니다.
         */
        put: operations["modifyProduct"];
        post?: never;
        /**
         * 상품 삭제
         * @description 상품을 삭제합니다.
         */
        delete: operations["deleteProduct"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/payments/paymentMethods/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * 결제 수단 단건 조회
         * @description 카드 또는 계좌 단건 조회
         */
        get: operations["getPaymentMethod"];
        /** 결제 수단 수정 */
        put: operations["editPaymentMethod"];
        post?: never;
        /** 결제 수단 삭제 */
        delete: operations["deletePaymentMethod"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/paymentMethods/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * 결제 수단 단건 조회
         * @description 로그인한 사용자의 결제 수단 단건을 반환합니다.
         */
        get: operations["getOne"];
        /**
         * 결제 수단 수정
         * @description CARD 수정: alias, isDefault, brand, last4, expMonth, expYear만 보내고 bankCode, bankName, acctLast4는 삭제
         *
         *     BANK 수정: alias, isDefault, bankCode(선택), bankName, acctLast4만 보내고 brand, last4, expMonth, expYear는 삭제
         */
        put: operations["edit"];
        post?: never;
        /**
         * 결제 수단 삭제
         * @description 기본 수단 삭제 시 최근 생성 수단으로 자동 승계합니다.
         */
        delete: operations["delete"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/members/me": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * 내 정보 API
         * @description 내 정보 확인
         */
        get: operations["myInfo"];
        /**
         * 내 정보 수정 Mock API
         * @description 내 정보 수정
         */
        put: operations["myInfoModify"];
        post?: never;
        /**
         * 회원탈퇴 Mock API
         * @description 회원탈퇴 확인
         */
        delete: operations["memberWithdraw"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/test/scheduler/run": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put: operations["runSchedulerManually"];
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/test/products/{productId}/end-soon": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["setAuctionEndSoonGet"];
        put: operations["setAuctionEndSoonPut"];
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/products": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * 상품 목록 조회
         * @description 조건에 따라 상품 목록을 조회합니다.
         */
        get: operations["getProducts"];
        put?: never;
        /**
         * 상품 등록
         * @description 새로운 상품을 등록합니다.
         */
        post: operations["createProduct"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/payments/payments": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * 결제 요청(충전)
         * @description 돈을 충전합니다.
         */
        post: operations["charge"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/payments/paymentMethods": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * 결제 수단 다건 조회
         * @description 카드, 계좌 다건 조회
         */
        get: operations["getPaymentMethods"];
        put?: never;
        /**
         * 결제 수단 등록
         * @description 카드 또는 계좌 등록
         */
        post: operations["createPaymentMethod"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/paymentMethods": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * 결제 수단 다건 조회
         * @description 로그인한 사용자의 결제 수단 목록을 반환합니다.
         */
        get: operations["list"];
        put?: never;
        /**
         * 결제 수단 등록
         * @description type: card, bank
         *
         *     CARD 등록: alias, isDefault, brand, last4, expMonth, expYear만 보내고 bankCode, bankName, acctLast4는 넣지마세요!
         *
         *     BANK 등록: alias, isDefault, bankCode(선택), bankName, acctLast4만 보내고 brand, last4, expMonth, expYear는 넣지마세요!
         */
        post: operations["create"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/boards": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** 게시글 작성 */
        post: operations["writeBoard"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/bids/products/{productId}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * 입찰 현황 조회
         * @description 특정 상품의 현재 입찰 현황 조회.
         */
        get: operations["getBidStatus"];
        put?: never;
        /**
         * 입찰 생성
         * @description 특정 상품에 대해 입찰 생성.
         */
        post: operations["createBid"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/auth/signup": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * 회원가입 API
         * @description 이메일 비밀번호를 받아 회원가입
         */
        post: operations["memberSignUp"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/auth/reissue": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * 토큰 재생성 API
         * @description refreshToken을 받아서 AccessToken 재발급
         */
        post: operations["reissue"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/auth/logout": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * 로그아웃 API
         * @description accessToken을 받아 로그아웃 처리
         */
        post: operations["logout"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/auth/login": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * 로그인 API
         * @description 이메일과 비밀번호를 받아 로그인 처리 후 토큰 발급
         */
        post: operations["login"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/notifications": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * 알림 목록 조회
         * @description 사용자의 알림 목록을 페이지네이션으로 조회, 읽음 상태로 필터링 가능.
         */
        get: operations["getNotifications"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/notifications/unread-count": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * 읽지 않은 알림 개수 조회
         * @description 사용자의 읽지 않은 알림 개수 조회.
         */
        get: operations["getUnreadCount"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/products/members/{memberId}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * 특정 회원 상품 조회
         * @description 특정 회원이 올린 상품들을 조회합니다.
         */
        get: operations["getProductsByMember"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/products/me": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * 내 상품 조회
         * @description 내가 올린 상품들을 조회합니다.
         */
        get: operations["getMyProducts"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/payments/payments/me": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** 내 결제 내역 조회 */
        get: operations["getMyPayments"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/payments/payments/me/{paymentId}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** 내 결제 상세 내역 조회 */
        get: operations["getMyPaymentDetail"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/members/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * 판매자 정보 Mock API
         * @description 판매자 정보 확인
         */
        get: operations["memberInfo"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/members/test": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * 테스트용 API
         * @description 인증된 사용자의 이메일 반환
         */
        get: operations["me"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/cashs/cash": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** 내 지갑 잔액 조회 */
        get: operations["getMyCash"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/cashs/cash/transactions": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * 내 원장 목록(입금/출금 내역)
         * @description 입금/출금 내역을 확인합니다.
         */
        get: operations["getCashTransactions"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/cashs/cash/transactions/{transactionId}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * 내 원장 단건 상세 조회
         * @description 원장 단건 조회
         */
        get: operations["getCashTransactionDetail"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/bids/me": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * 내 입찰 내역 조회
         * @description 현재 사용자의 입찰 내역을 페이지네이션으로 조회.
         */
        get: operations["getMyBids"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/auth/check": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * 로그인 확인 API
         * @description 현재 로그인 되어있는지 확인
         */
        get: operations["checkLogin"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
}
export type webhooks = Record<string, never>;
export interface components {
    schemas: {
        RsData: {
            resultCode: string;
            msg: string;
            data: Record<string, never>;
        };
        /** @description 상품 수정 요청 정보 */
        ProductModifyRequest: {
            /**
             * @description 상품명
             * @example 아이폰 15 Pro 256GB
             */
            name?: string;
            /**
             * @description 상품 설명
             * @example 미개봉 새 제품입니다. 직거래 선호합니다.
             */
            description?: string;
            /**
             * Format: int32
             * @description 카테고리 ID
             * @example 1
             */
            categoryId?: number;
            /**
             * Format: int64
             * @description 시작 가격
             * @example 1000000
             */
            initialPrice?: number;
            /**
             * Format: date-time
             * @description 경매 시작 시간
             */
            auctionStartTime?: string;
            /**
             * @description 경매 기간
             * @example 24시간
             */
            auctionDuration?: string;
            /**
             * @description 배송 방법
             * @example TRADE
             * @enum {string}
             */
            deliveryMethod?: "DELIVERY" | "TRADE" | "BOTH";
            /**
             * @description 위치
             * @example 서울 강남구
             */
            location?: string;
        };
        PaymentMethodEditResponse: {
            /** Format: int64 */
            id?: number;
            type?: string;
            alias?: string;
            isDefault?: boolean;
            brand?: string;
            last4?: string;
            /** Format: int32 */
            expMonth?: number;
            /** Format: int32 */
            expYear?: number;
            bankCode?: string;
            bankName?: string;
            acctLast4?: string;
            createDate?: string;
            modifyDate?: string;
            expireDate?: string;
        };
        RsDataPaymentMethodEditResponse: {
            resultCode: string;
            msg: string;
            data: components["schemas"]["PaymentMethodEditResponse"];
        };
        PaymentMethodEditRequest: {
            alias?: string;
            isDefault?: boolean;
            brand?: string;
            last4?: string;
            /** Format: int32 */
            expMonth?: number;
            /** Format: int32 */
            expYear?: number;
            bankCode?: string;
            bankName?: string;
            acctLast4?: string;
        };
        PaymentMethodResponse: {
            /** Format: int64 */
            id?: number;
            type?: string;
            alias?: string;
            isDefault?: boolean;
            brand?: string;
            last4?: string;
            /** Format: int32 */
            expMonth?: number;
            /** Format: int32 */
            expYear?: number;
            bankCode?: string;
            bankName?: string;
            acctLast4?: string;
            createDate?: string;
            modifyDate?: string;
            expireDate?: string;
        };
        MemberModifyRequestDto: {
            /**
             * @description 닉네임
             * @example example123
             */
            nickname: string;
            /**
             * @description 프로필 이미지
             * @example example123
             */
            profileImageUrl?: string;
            /**
             * @description 휴대폰 번호
             * @example 010-0000-0000
             */
            phone: string;
            /**
             * @description 주소
             * @example 서울 강남구...
             */
            address: string;
        };
        MemberMyInfoResponseDto: {
            /**
             * Format: int64
             * @description DB 아이디
             * @example 1
             */
            id?: number;
            /**
             * @description 이메일
             * @example test@test.com
             */
            email?: string;
            /**
             * @description 닉네임
             * @example test
             */
            nickname?: string;
            /**
             * @description 전화번호
             * @example 010-0000-0000
             */
            phone?: string;
            /**
             * @description 주소
             * @example 서울특별시 강남구...
             */
            address?: string;
            /**
             * @description 프로필 이미지
             * @example https://example.com/profile.jpg
             */
            profileImage?: string;
            /**
             * Format: int32
             * @description 신뢰 포인트
             * @example 50
             */
            creditScore?: number;
            /**
             * Format: date-time
             * @description 생성일
             */
            createDate?: string;
            /**
             * Format: date-time
             * @description 업데이트일
             */
            modifyDate?: string;
        };
        RsDataMemberMyInfoResponseDto: {
            resultCode: string;
            msg: string;
            data: components["schemas"]["MemberMyInfoResponseDto"];
        };
        RsDataString: {
            resultCode: string;
            msg: string;
            data: string;
        };
        /** @description 상품 등록 요청 정보 */
        ProductCreateRequest: {
            /**
             * @description 상품명
             * @example 아이폰 15 Pro 256GB
             */
            name: string;
            /**
             * @description 상품 설명
             * @example 미개봉 새 제품입니다. 직거래 선호합니다.
             */
            description?: string;
            /**
             * Format: int32
             * @description 카테고리 ID
             * @example 1
             */
            categoryId: number;
            /**
             * Format: int64
             * @description 시작 가격
             * @example 1000000
             */
            initialPrice: number;
            /**
             * Format: date-time
             * @description 경매 시작 시간
             */
            auctionStartTime: string;
            /**
             * @description 경매 기간
             * @example 24시간
             */
            auctionDuration: string;
            /**
             * @description 배송 방법
             * @example TRADE
             * @enum {string}
             */
            deliveryMethod: "DELIVERY" | "TRADE" | "BOTH";
            /**
             * @description 위치
             * @example 서울 강남구
             */
            location?: string;
        };
        PaymentResponse: {
            /** Format: int64 */
            paymentId?: number;
            /** Format: int64 */
            paymentMethodId?: number;
            status?: string;
            /** Format: int64 */
            amount?: number;
            currency?: string;
            provider?: string;
            methodType?: string;
            transactionId?: string;
            createdAt?: string;
            modifyDate?: string;
            idempotencyKey?: string;
            /** Format: int64 */
            cashTransactionId?: number;
            /** Format: int64 */
            balanceAfter?: number;
        };
        RsDataPaymentResponse: {
            resultCode: string;
            msg: string;
            data: components["schemas"]["PaymentResponse"];
        };
        RsDataPaymentMethodResponse: {
            resultCode: string;
            msg: string;
            data: components["schemas"]["PaymentMethodResponse"];
        };
        PaymentMethodCreateRequest: {
            type?: string;
            token?: string;
            alias?: string;
            isDefault?: boolean;
            brand?: string;
            last4?: string;
            /** Format: int32 */
            expMonth?: number;
            /** Format: int32 */
            expYear?: number;
            bankCode?: string;
            bankName?: string;
            acctLast4?: string;
        };
        BoardWriteRequest: {
            title?: string;
            content?: string;
            /** @enum {string} */
            boardType?: "NOTICE" | "QNA" | "FAQ";
        };
        BoardWriteResponse: {
            /** Format: int64 */
            id?: number;
            title?: string;
            content?: string;
            /** @enum {string} */
            boardType?: "NOTICE" | "QNA" | "FAQ";
        };
        RsDataBoardWriteResponse: {
            resultCode: string;
            msg: string;
            data: components["schemas"]["BoardWriteResponse"];
        };
        /** @description 입찰 요청 정보 */
        BidRequestDto: {
            /** Format: int64 */
            price: number;
        };
        MemberSignUpRequestDto: {
            /**
             * @description 회원 이메일
             * @example test@example.com
             */
            email: string;
            /**
             * @description 회원 비밀번호
             * @example example123
             */
            password: string;
            /**
             * @description 회원 닉네임
             * @example testUser1
             */
            nickname: string;
            phone: string;
            address: string;
        };
        MemberSignUpResponseDto: {
            /**
             * Format: int64
             * @description 생성된 회원 ID
             * @example 1
             */
            memberId?: number;
            /**
             * @description 회원 이메일
             * @example test@example.com
             */
            email?: string;
            /**
             * @description 회원 닉네임
             * @example testUser1
             */
            nickname?: string;
        };
        RsDataMemberSignUpResponseDto: {
            resultCode: string;
            msg: string;
            data: components["schemas"]["MemberSignUpResponseDto"];
        };
        LoginResponseDto: {
            /** @description Access Token */
            accessToken?: string;
            /** @description Refresh Token */
            refreshToken?: string;
        };
        RsDataLoginResponseDto: {
            resultCode: string;
            msg: string;
            data: components["schemas"]["LoginResponseDto"];
        };
        /** @description 로그아웃 응답 DTO */
        LogoutResponseDto: {
            /**
             * @description 결과 코드
             * @example 200
             */
            resultCode?: string;
            /**
             * @description 응답 메시지
             * @example 로그아웃 되었습니다.
             */
            msg?: string;
        };
        LoginRequestDto: {
            /**
             * @description 회원 이메일
             * @example test@example.com
             */
            email: string;
            /**
             * @description 회원 비밀번호
             * @example example123
             */
            password: string;
        };
        MyPaymentListItemResponse: {
            /** Format: int64 */
            paymentId?: number;
            /** Format: int64 */
            paymentMethodId?: number;
            status?: string;
            /** Format: int64 */
            amount?: number;
            currency?: string;
            provider?: string;
            methodType?: string;
            transactionId?: string;
            createdAt?: string;
        };
        MyPaymentsResponse: {
            /** Format: int32 */
            page?: number;
            /** Format: int32 */
            size?: number;
            /** Format: int64 */
            total?: number;
            items?: components["schemas"]["MyPaymentListItemResponse"][];
        };
        RsDataMyPaymentsResponse: {
            resultCode: string;
            msg: string;
            data: components["schemas"]["MyPaymentsResponse"];
        };
        MyPaymentResponse: {
            /** Format: int64 */
            paymentId?: number;
            /** Format: int64 */
            paymentMethodId?: number;
            status?: string;
            /** Format: int64 */
            amount?: number;
            currency?: string;
            provider?: string;
            methodType?: string;
            transactionId?: string;
            createdAt?: string;
            modifyDate?: string;
            idempotencyKey?: string;
            /** Format: int64 */
            cashTransactionId?: number;
            /** Format: int64 */
            balanceAfter?: number;
        };
        RsDataMyPaymentResponse: {
            resultCode: string;
            msg: string;
            data: components["schemas"]["MyPaymentResponse"];
        };
        RsDataListPaymentMethodResponse: {
            resultCode: string;
            msg: string;
            data: components["schemas"]["PaymentMethodResponse"][];
        };
        MemberInfoResponseDto: {
            /**
             * Format: int64
             * @description DB 아이디
             * @example 1
             */
            id?: number;
            /**
             * @description 이메일
             * @example test@test.com
             */
            email?: string;
            /**
             * @description 닉네임
             * @example test
             */
            nickname?: string;
            /**
             * @description 전화번호
             * @example 010-0000-0000
             */
            phone?: string;
            /**
             * @description 프로필 이미지
             * @example https://example.com/profile.jpg
             */
            profileImage?: string;
            /**
             * Format: int32
             * @description 신뢰 포인트
             * @example 50
             */
            creditScore?: number;
            /**
             * Format: date-time
             * @description 생성일
             */
            createDate?: string;
        };
        RsDataMemberInfoResponseDto: {
            resultCode: string;
            msg: string;
            data: components["schemas"]["MemberInfoResponseDto"];
        };
        CashResponse: {
            /** Format: int64 */
            cashId?: number;
            /** Format: int64 */
            memberId?: number;
            /** Format: int64 */
            balance?: number;
            createDate?: string;
            modifyDate?: string;
        };
        RsDataCashResponse: {
            resultCode: string;
            msg: string;
            data: components["schemas"]["CashResponse"];
        };
        CashTransactionItemResponse: {
            /** Format: int64 */
            transactionId?: number;
            /** Format: int64 */
            cashId?: number;
            type?: string;
            /** Format: int64 */
            amount?: number;
            /** Format: int64 */
            balanceAfter?: number;
            createdAt?: string;
            related?: components["schemas"]["Related"];
        };
        CashTransactionsResponse: {
            /** Format: int32 */
            page?: number;
            /** Format: int32 */
            size?: number;
            /** Format: int64 */
            total?: number;
            items?: components["schemas"]["CashTransactionItemResponse"][];
        };
        Product: {
            /** Format: int64 */
            productId?: number;
            productName?: string;
            thumbnailUrl?: string;
        };
        Related: {
            type?: string;
            /** Format: int64 */
            id?: number;
            product?: components["schemas"]["Product"];
            summary?: string;
        };
        RsDataCashTransactionsResponse: {
            resultCode: string;
            msg: string;
            data: components["schemas"]["CashTransactionsResponse"];
        };
        CashTransactionResponse: {
            /** Format: int64 */
            transactionId?: number;
            /** Format: int64 */
            cashId?: number;
            type?: string;
            /** Format: int64 */
            amount?: number;
            /** Format: int64 */
            balanceAfter?: number;
            createdAt?: string;
            related?: components["schemas"]["Related"];
        };
        RsDataCashTransactionResponse: {
            resultCode: string;
            msg: string;
            data: components["schemas"]["CashTransactionResponse"];
        };
        PaymentMethodDeleteResponse: {
            /** Format: int64 */
            id?: number;
            deleted?: boolean;
            wasDefault?: boolean;
            /** Format: int64 */
            newDefaultId?: number;
        };
        RsDataPaymentMethodDeleteResponse: {
            resultCode: string;
            msg: string;
            data: components["schemas"]["PaymentMethodDeleteResponse"];
        };
    };
    responses: never;
    parameters: never;
    requestBodies: never;
    headers: never;
    pathItems: never;
}
export type $defs = Record<string, never>;
export interface operations {
    markAsRead: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description 알림 ID */
                id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description 알림 읽음 처리 성공 */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json;charset=UTF-8": components["schemas"]["RsData"];
                };
            };
            /** @description 인증 실패 */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json;charset=UTF-8": components["schemas"]["RsData"];
                };
            };
            /** @description 알림을 찾을 수 없음 */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json;charset=UTF-8": components["schemas"]["RsData"];
                };
            };
        };
    };
    markAllAsRead: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description 모든 알림 읽음 처리 성공 */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json;charset=UTF-8": components["schemas"]["RsData"];
                };
            };
            /** @description 인증 실패 */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json;charset=UTF-8": components["schemas"]["RsData"];
                };
            };
        };
    };
    getProduct: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description 상품 ID */
                productId: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description 상품 상세 조회 성공 */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json;charset=UTF-8": components["schemas"]["RsData"];
                };
            };
            /** @description 상품을 찾을 수 없음 */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json;charset=UTF-8": components["schemas"]["RsData"];
                };
            };
        };
    };
    modifyProduct: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description 상품 ID */
                productId: number;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "multipart/form-data": {
                    request: components["schemas"]["ProductModifyRequest"];
                    /** @description 상품 이미지 */
                    images?: string[];
                    /** @description 삭제할 이미지 ID */
                    deleteImageIds?: number[];
                };
            };
        };
        responses: {
            /** @description 상품 수정 성공 */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json;charset=UTF-8": components["schemas"]["RsData"];
                };
            };
            /** @description 잘못된 요청 */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json;charset=UTF-8": components["schemas"]["RsData"];
                };
            };
            /** @description 인증 실패 */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json;charset=UTF-8": components["schemas"]["RsData"];
                };
            };
            /** @description 인가 실패 */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json;charset=UTF-8": components["schemas"]["RsData"];
                };
            };
            /** @description 상품을 찾을 수 없음 */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json;charset=UTF-8": components["schemas"]["RsData"];
                };
            };
        };
    };
    deleteProduct: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description 상품 ID */
                productId: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description 상품 삭제 성공 */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json;charset=UTF-8": components["schemas"]["RsData"];
                };
            };
            /** @description 잘못된 요청 */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json;charset=UTF-8": components["schemas"]["RsData"];
                };
            };
            /** @description 인증 실패 */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json;charset=UTF-8": components["schemas"]["RsData"];
                };
            };
            /** @description 인가 실패 */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json;charset=UTF-8": components["schemas"]["RsData"];
                };
            };
            /** @description 상품을 찾을 수 없음 */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json;charset=UTF-8": components["schemas"]["RsData"];
                };
            };
        };
    };
    getPaymentMethod: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json;charset=UTF-8": components["schemas"]["RsDataPaymentMethodResponse"];
                };
            };
        };
    };
    editPaymentMethod: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json;charset=UTF-8": components["schemas"]["RsDataPaymentMethodEditResponse"];
                };
            };
        };
    };
    deletePaymentMethod: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json;charset=UTF-8": components["schemas"]["RsDataPaymentMethodDeleteResponse"];
                };
            };
        };
    };
    getOne: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json;charset=UTF-8": components["schemas"]["PaymentMethodResponse"];
                };
            };
        };
    };
    edit: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: number;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["PaymentMethodEditRequest"];
            };
        };
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json;charset=UTF-8": components["schemas"]["PaymentMethodResponse"];
                };
            };
        };
    };
    delete: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json;charset=UTF-8": components["schemas"]["PaymentMethodDeleteResponse"];
                };
            };
        };
    };
    myInfo: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json;charset=UTF-8": components["schemas"]["RsDataMemberMyInfoResponseDto"];
                };
            };
        };
    };
    myInfoModify: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["MemberModifyRequestDto"];
            };
        };
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json;charset=UTF-8": components["schemas"]["RsDataMemberMyInfoResponseDto"];
                };
            };
        };
    };
    memberWithdraw: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json;charset=UTF-8": components["schemas"]["RsDataString"];
                };
            };
        };
    };
    runSchedulerManually: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json;charset=UTF-8": components["schemas"]["RsDataString"];
                };
            };
        };
    };
    setAuctionEndSoonGet: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                productId: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json;charset=UTF-8": components["schemas"]["RsDataString"];
                };
            };
        };
    };
    setAuctionEndSoonPut: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                productId: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json;charset=UTF-8": components["schemas"]["RsDataString"];
                };
            };
        };
    };
    getProducts: {
        parameters: {
            query?: {
                /** @description 페이지 번호 (1부터 시작) */
                page?: number;
                /** @description 페이지 크기 */
                size?: number;
                /** @description 상품명 검색어 */
                keyword?: string;
                /** @description 상품 카테고리 (번호) */
                category?: number[];
                /** @description 직거래 시 지역 */
                location?: string[];
                /** @description 배송 가능 여부 */
                isDelivery?: boolean;
                /** @description 경매 상태 */
                status?: "BEFORE_START" | "BIDDING" | "SUCCESSFUL" | "FAILED";
                /** @description 정렬 기준 */
                sort?: "LATEST" | "PRICE_HIGH" | "PRICE_LOW" | "ENDING_SOON" | "POPULAR";
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description 상품 목록 조회 성공 */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json;charset=UTF-8": components["schemas"]["RsData"];
                };
            };
        };
    };
    createProduct: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: {
            content: {
                "multipart/form-data": {
                    request: components["schemas"]["ProductCreateRequest"];
                    /** @description 상품 이미지 */
                    images: string[];
                };
            };
        };
        responses: {
            /** @description 상품 등록 성공 */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json;charset=UTF-8": components["schemas"]["RsData"];
                };
            };
            /** @description 잘못된 요청 */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json;charset=UTF-8": components["schemas"]["RsData"];
                };
            };
            /** @description 인증 실패 */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json;charset=UTF-8": components["schemas"]["RsData"];
                };
            };
        };
    };
    charge: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json;charset=UTF-8": components["schemas"]["RsDataPaymentResponse"];
                };
            };
        };
    };
    getPaymentMethods: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json;charset=UTF-8": components["schemas"]["RsDataListPaymentMethodResponse"];
                };
            };
        };
    };
    createPaymentMethod: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json;charset=UTF-8": components["schemas"]["RsDataPaymentMethodResponse"];
                };
            };
        };
    };
    list: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json;charset=UTF-8": components["schemas"]["PaymentMethodResponse"][];
                };
            };
        };
    };
    create: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["PaymentMethodCreateRequest"];
            };
        };
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json;charset=UTF-8": components["schemas"]["PaymentMethodResponse"];
                };
            };
        };
    };
    writeBoard: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["BoardWriteRequest"];
            };
        };
        responses: {
            /** @description 게시글이 작성되었습니다. */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json;charset=UTF-8": components["schemas"]["RsDataBoardWriteResponse"];
                };
            };
        };
    };
    getBidStatus: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description 상품 ID */
                productId: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description 입찰 현황 조회 성공 */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json;charset=UTF-8": components["schemas"]["RsData"];
                };
            };
            /** @description 상품을 찾을 수 없음 */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json;charset=UTF-8": components["schemas"]["RsData"];
                };
            };
        };
    };
    createBid: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description 상품 ID */
                productId: number;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["BidRequestDto"];
            };
        };
        responses: {
            /** @description 입찰 생성 성공 */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json;charset=UTF-8": components["schemas"]["RsData"];
                };
            };
            /** @description 잘못된 요청 */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json;charset=UTF-8": components["schemas"]["RsData"];
                };
            };
            /** @description 인증 실패 */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json;charset=UTF-8": components["schemas"]["RsData"];
                };
            };
        };
    };
    memberSignUp: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["MemberSignUpRequestDto"];
            };
        };
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json;charset=UTF-8": components["schemas"]["RsDataMemberSignUpResponseDto"];
                };
            };
        };
    };
    reissue: {
        parameters: {
            query?: never;
            header: {
                Authorization: string;
            };
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json;charset=UTF-8": components["schemas"]["RsDataLoginResponseDto"];
                };
            };
        };
    };
    logout: {
        parameters: {
            query?: never;
            header: {
                Authorization: string;
            };
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json;charset=UTF-8": components["schemas"]["LogoutResponseDto"];
                };
            };
        };
    };
    login: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["LoginRequestDto"];
            };
        };
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json;charset=UTF-8": components["schemas"]["RsDataLoginResponseDto"];
                };
            };
        };
    };
    getNotifications: {
        parameters: {
            query?: {
                /**
                 * @description 페이지 번호 (0부터 시작)
                 * @example 0
                 */
                page?: number;
                /**
                 * @description 페이지 크기
                 * @example 10
                 */
                size?: number;
                /**
                 * @description 읽음 상태 필터 (true: 읽음, false: 안읽음, null: 전체)
                 * @example false
                 */
                isRead?: boolean;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description 알림 목록 조회 성공 */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json;charset=UTF-8": components["schemas"]["RsData"];
                };
            };
            /** @description 인증 실패 */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json;charset=UTF-8": components["schemas"]["RsData"];
                };
            };
        };
    };
    getUnreadCount: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description 읽지 않은 알림 개수 조회 성공 */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json;charset=UTF-8": components["schemas"]["RsData"];
                };
            };
            /** @description 인증 실패 */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json;charset=UTF-8": components["schemas"]["RsData"];
                };
            };
        };
    };
    getProductsByMember: {
        parameters: {
            query?: {
                /** @description 페이지 번호 (1부터 시작) */
                page?: number;
                /** @description 페이지 크기 */
                size?: number;
                /** @description 판매 상태 */
                status?: "SELLING" | "SOLD" | "FAILED";
                /** @description 정렬 기준 */
                sort?: "LATEST" | "PRICE_HIGH" | "PRICE_LOW" | "ENDING_SOON" | "POPULAR";
            };
            header?: never;
            path: {
                /** @description 회원 ID */
                memberId: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description 특정 회원 상품 조회 성공 */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json;charset=UTF-8": components["schemas"]["RsData"];
                };
            };
            /** @description 회원을 찾을 수 없음 */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json;charset=UTF-8": components["schemas"]["RsData"];
                };
            };
        };
    };
    getMyProducts: {
        parameters: {
            query?: {
                /** @description 페이지 번호 (1부터 시작) */
                page?: number;
                /** @description 페이지 크기 */
                size?: number;
                /** @description 판매 상태 */
                status?: "SELLING" | "SOLD" | "FAILED";
                /** @description 정렬 기준 */
                sort?: "LATEST" | "PRICE_HIGH" | "PRICE_LOW" | "ENDING_SOON" | "POPULAR";
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description 내 상품 조회 성공 */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json;charset=UTF-8": components["schemas"]["RsData"];
                };
            };
            /** @description 인증 실패 */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json;charset=UTF-8": components["schemas"]["RsData"];
                };
            };
        };
    };
    getMyPayments: {
        parameters: {
            query?: {
                page?: number;
                size?: number;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json;charset=UTF-8": components["schemas"]["RsDataMyPaymentsResponse"];
                };
            };
        };
    };
    getMyPaymentDetail: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                paymentId: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json;charset=UTF-8": components["schemas"]["RsDataMyPaymentResponse"];
                };
            };
        };
    };
    memberInfo: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json;charset=UTF-8": components["schemas"]["RsDataMemberInfoResponseDto"];
                };
            };
        };
    };
    me: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json;charset=UTF-8": string;
                };
            };
        };
    };
    getMyCash: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json;charset=UTF-8": components["schemas"]["RsDataCashResponse"];
                };
            };
        };
    };
    getCashTransactions: {
        parameters: {
            query?: {
                page?: number;
                size?: number;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json;charset=UTF-8": components["schemas"]["RsDataCashTransactionsResponse"];
                };
            };
        };
    };
    getCashTransactionDetail: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                transactionId: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json;charset=UTF-8": components["schemas"]["RsDataCashTransactionResponse"];
                };
            };
        };
    };
    getMyBids: {
        parameters: {
            query?: {
                /**
                 * @description 페이지 번호 (0부터 시작)
                 * @example 0
                 */
                page?: number;
                /**
                 * @description 페이지 크기
                 * @example 10
                 */
                size?: number;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description 내 입찰 내역 조회 성공 */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json;charset=UTF-8": components["schemas"]["RsData"];
                };
            };
            /** @description 인증 실패 */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json;charset=UTF-8": components["schemas"]["RsData"];
                };
            };
        };
    };
    checkLogin: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json;charset=UTF-8": components["schemas"]["RsDataString"];
                };
            };
        };
    };
}
