'use client'

import { Button } from '@/components/ui/button'
import { Card, CardContent } from '@/components/ui/card'
import { ErrorAlert } from '@/components/ui/error-alert'
import {
  PageSizeSelector,
  Pagination,
  PaginationInfo,
} from '@/components/ui/pagination'
import { bidApi, cashApi, paymentApi } from '@/lib/api'
import { Bid } from '@/types'
import { ExternalLink, StarIcon } from 'lucide-react'
import { useRouter } from 'next/navigation'
import { useCallback, useEffect, useState } from 'react'

interface BidStatusClientProps {
  initialBids?: Bid[]
  initialPagination?: {
    currentPage: number
    totalPages: number
    totalElements: number
    pageSize: number
  }
}

type TabType = 'bids' | 'payments'

export function BidStatusClient({
  initialBids,
  initialPagination,
}: BidStatusClientProps) {
  const router = useRouter()
  const [apiError, setApiError] = useState('')
  const [payingBidId, setPayingBidId] = useState<number | null>(null)
  const [activeTab, setActiveTab] = useState<TabType>('bids')

  // ÏûÖÏ∞∞ ÎÇ¥Ïó≠ ÏÉÅÌÉú
  const [bids, setBids] = useState<any[]>(initialBids || [])
  const [isLoading, setIsLoading] = useState(false)
  const [currentPage, setCurrentPage] = useState(1)
  const [pageSize, setPageSize] = useState(5)
  const [totalPages, setTotalPages] = useState(0)
  const [totalElements, setTotalElements] = useState(0)

  // Í≤∞Ï†ú ÎÇ¥Ïó≠ ÏÉÅÌÉú
  const [payments, setPayments] = useState<any[]>([])
  const [isLoadingPayments, setIsLoadingPayments] = useState(false)
  const [currentPaymentPage, setCurrentPaymentPage] = useState(1)
  const [paymentPageSize, setPaymentPageSize] = useState(5)
  const [paymentTotalPages, setPaymentTotalPages] = useState(0)
  const [paymentTotalElements, setPaymentTotalElements] = useState(0)

  // ÏûÖÏ∞∞ Îç∞Ïù¥ÌÑ∞ Î°úÎìú
  const loadBids = useCallback(async (page: number = 1, size: number = 5) => {
    setIsLoading(true)
    setApiError('')

    try {
      const response = await bidApi.getMyBids({
        page: page - 1, // APIÎäî 0-based ÌéòÏù¥ÏßÄÎÑ§Ïù¥ÏÖò ÏÇ¨Ïö©
        size,
      })

      if (response.success && response.data) {
        // ÏûÖÏ∞∞ APIÎäî MyBidResponseDto Íµ¨Ï°∞Î°ú Í≥†Ï†ïÎê®
        const {
          content,
          totalElements,
          totalPages,
          currentPage,
          pageSize,
          hasNext,
        } = response.data

        // API ÏùëÎãµÏùò Seller ÌïÑÎìúÎ•º sellerÎ°ú Î≥ÄÌôò
        const bidsData = (content || []).map((bid: any) => ({
          ...bid,
          seller: bid.Seller || bid.seller, // ÎåÄÎ¨∏Ïûê SellerÎ•º ÏÜåÎ¨∏Ïûê sellerÎ°ú Î≥ÄÌôò
        }))

        const pageable = {
          currentPage: currentPage + 1, // 0-basedÎ•º 1-basedÎ°ú Î≥ÄÌôò
          pageSize: pageSize,
          totalPages: totalPages,
          totalElements: totalElements,
          hasNext: hasNext,
          hasPrevious: currentPage > 0,
        }

        setBids(bidsData)
        setCurrentPage(pageable.currentPage)
        setTotalPages(pageable.totalPages)
        setTotalElements(pageable.totalElements)
        // API ÏùëÎãµÏùò pageSize ÎåÄÏã† ÏöîÏ≤≠Ìïú size ÏÇ¨Ïö© (ÏÇ¨Ïö©Ïûê ÏÑ†ÌÉù Ïú†ÏßÄ)
        setPageSize(size)
      } else {
        setApiError(response.msg || 'ÏûÖÏ∞∞ ÎÇ¥Ïó≠ÏùÑ Î∂àÎü¨Ïò§ÎäîÎç∞ Ïã§Ìå®ÌñàÏäµÎãàÎã§.')
      }
    } catch (error: any) {
      console.error('ÏûÖÏ∞∞ ÎÇ¥Ïó≠ Î°úÎìú Ïã§Ìå®:', error)
      setApiError('ÏûÖÏ∞∞ ÎÇ¥Ïó≠ÏùÑ Î∂àÎü¨Ïò§ÎäîÎç∞ Ïã§Ìå®ÌñàÏäµÎãàÎã§.')
    } finally {
      setIsLoading(false)
    }
  }, [])

  // Í≤∞Ï†ú ÎÇ¥Ïó≠ Î°úÎìú
  const loadPayments = useCallback(
    async (page: number = 1, size: number = 5) => {
      setIsLoadingPayments(true)
      setApiError('')

      try {
        const response = await paymentApi.getMyPayments({
          page: page - 1, // APIÎäî 0-based ÌéòÏù¥ÏßÄÎÑ§Ïù¥ÏÖò ÏÇ¨Ïö©
          size,
        })

        if (response.success && response.data) {
          const {
            content,
            totalElements,
            totalPages,
            currentPage,
            pageSize,
            hasNext,
          } = response.data

          setPayments(content || [])
          setCurrentPaymentPage(currentPage + 1) // 0-basedÎ•º 1-basedÎ°ú Î≥ÄÌôò
          setPaymentTotalPages(totalPages)
          setPaymentTotalElements(totalElements)
          // API ÏùëÎãµÏùò pageSize ÎåÄÏã† ÏöîÏ≤≠Ìïú size ÏÇ¨Ïö© (ÏÇ¨Ïö©Ïûê ÏÑ†ÌÉù Ïú†ÏßÄ)
          setPaymentPageSize(size)
        } else {
          setApiError(response.msg || 'Í≤∞Ï†ú ÎÇ¥Ïó≠ÏùÑ Î∂àÎü¨Ïò§ÎäîÎç∞ Ïã§Ìå®ÌñàÏäµÎãàÎã§.')
        }
      } catch (error: any) {
        console.error('Í≤∞Ï†ú ÎÇ¥Ïó≠ Î°úÎìú Ïã§Ìå®:', error)
        setApiError('Í≤∞Ï†ú ÎÇ¥Ïó≠ÏùÑ Î∂àÎü¨Ïò§ÎäîÎç∞ Ïã§Ìå®ÌñàÏäµÎãàÎã§.')
      } finally {
        setIsLoadingPayments(false)
      }
    },
    [],
  )

  // Ï¥àÍ∏∞ Î°úÎìú
  useEffect(() => {
    if (!initialBids || initialBids.length === 0) {
      loadBids(1, pageSize)
    } else {
      // initialBidsÍ∞Ä ÏûàÏùÑ ÎïåÎèÑ ÌéòÏù¥ÏßÄÎÑ§Ïù¥ÏÖò Ï†ïÎ≥¥ ÏÑ§Ï†ï
      // initialBidsÎèÑ Seller ÌïÑÎìú Î≥ÄÌôò
      const transformedInitialBids = initialBids.map((bid: any) => ({
        ...bid,
        seller: bid.Seller || bid.seller, // ÎåÄÎ¨∏Ïûê SellerÎ•º ÏÜåÎ¨∏Ïûê sellerÎ°ú Î≥ÄÌôò
      }))

      setBids(transformedInitialBids)

      // initialPaginationÏù¥ ÏûàÏúºÎ©¥ ÏÇ¨Ïö©, ÏóÜÏúºÎ©¥ Í∏∞Î≥∏Í∞í ÏÑ§Ï†ï
      if (initialPagination) {
        setCurrentPage(initialPagination.currentPage)
        setTotalPages(initialPagination.totalPages)
        setTotalElements(initialPagination.totalElements)
        setPageSize(initialPagination.pageSize)
      } else {
        // fallback: Îç∞Ïù¥ÌÑ∞ Í∏∏Ïù¥Î°ú Í∏∞Î≥∏Í∞í ÏÑ§Ï†ï
        setTotalElements(transformedInitialBids.length)
        setTotalPages(1)
        setCurrentPage(1)
        setPageSize(transformedInitialBids.length)
      }
    }
  }, [loadBids, initialBids, initialPagination])

  // ÌÉ≠ Î≥ÄÍ≤Ω Ìï∏Îì§Îü¨
  const handleTabChange = async (tab: TabType) => {
    setActiveTab(tab)
    setApiError('')

    if (tab === 'payments' && payments.length === 0) {
      await loadPayments(1, paymentPageSize)
    }
  }

  // ÏûÖÏ∞∞ ÎÇ¥Ïó≠ ÌéòÏù¥ÏßÄÎÑ§Ïù¥ÏÖò
  const goToPage = (page: number) => {
    if (page >= 1 && page <= totalPages) {
      loadBids(page, pageSize)
    }
  }

  const handlePageSizeChange = (newSize: number) => {
    setPageSize(newSize)
    loadBids(1, newSize)
  }

  const refresh = () => {
    loadBids(currentPage, pageSize)
  }

  // Í≤∞Ï†ú ÎÇ¥Ïó≠ ÌéòÏù¥ÏßÄÎÑ§Ïù¥ÏÖò
  const goToPaymentPage = (page: number) => {
    if (page >= 1 && page <= paymentTotalPages) {
      loadPayments(page, paymentPageSize)
    }
  }

  const handlePaymentPageSizeChange = (newSize: number) => {
    setPaymentPageSize(newSize)
    loadPayments(1, newSize)
  }

  const refreshPayments = () => {
    loadPayments(currentPaymentPage, paymentPageSize)
  }

  const hasNext = currentPage < totalPages
  const hasPrevious = currentPage > 1
  const hasPaymentNext = currentPaymentPage < paymentTotalPages
  const hasPaymentPrevious = currentPaymentPage > 1

  // Î≥ÄÌôòÎêú ÏûÖÏ∞∞ Îç∞Ïù¥ÌÑ∞
  const transformedBids = bids

  const formatPrice = (price: number) => {
    return new Intl.NumberFormat('ko-KR').format(price) + 'Ïõê'
  }

  const formatDate = (dateString: string) => {
    if (!dateString) return 'ÎØ∏Ï†ï'
    const d = new Date(dateString)
    if (isNaN(d.getTime())) return 'ÎØ∏Ï†ï'
    return d.toLocaleDateString('ko-KR', {
      year: 'numeric',
      month: '2-digit',
      day: '2-digit',
    })
  }

  const getStatusInfo = (bid: any) => {
    if (bid.productStatus === 'ÎÇôÏ∞∞') {
      if (bid.isWinning === true) {
        return {
          label: bid.paidAt ? 'Í≤∞Ï†ú ÏôÑÎ£å' : 'ÎÇôÏ∞∞ ÏÑ±Í≥µ',
          color: bid.paidAt ? 'text-blue-600' : 'text-green-600',
          bgColor: bid.paidAt ? 'bg-blue-50' : 'bg-green-50',
          icon: bid.paidAt ? '‚úÖ' : 'üéâ',
        }
      } else {
        return {
          label: 'Í≤ΩÎß§ Ïã§Ìå®',
          color: 'text-gray-600',
          bgColor: 'bg-gray-50',
          icon: 'üòî',
        }
      }
    } else if (
      bid.isWinning &&
      bid.status === 'BIDDING' &&
      bid.productStatus !== 'ÎÇôÏ∞∞'
    ) {
      return {
        label: 'ÌòÑÏû¨ ÏµúÍ≥†Í∞Ä',
        color: 'text-green-600',
        bgColor: 'bg-green-50',
        icon: 'üèÜ',
      }
    } else if (bid.status === 'BIDDING') {
      return {
        label: 'ÏßÑÌñâÏ§ë',
        color: 'text-blue-600',
        bgColor: 'bg-blue-50',
        icon: '‚è≥',
      }
    } else if (bid.status === 'LOSING') {
      return {
        label: 'Ïú†Ï∞∞',
        color: 'text-gray-600',
        bgColor: 'bg-gray-50',
        icon: 'üò¢',
      }
    } else if (bid.status === 'CANCELLED') {
      return {
        label: 'Ï∑®ÏÜåÎê®',
        color: 'text-red-600',
        bgColor: 'bg-red-50',
        icon: '‚ùå',
      }
    } else {
      return {
        label: 'ÏßÑÌñâÏ§ë',
        color: 'text-blue-600',
        bgColor: 'bg-blue-50',
        icon: '‚è≥',
      }
    }
  }

  // Í≤∞Ï†ú Í∞ÄÎä• Ïó¨Î∂Ä ÌôïÏù∏
  const canPayBid = (bid: any) => {
    return (
      bid.productStatus === 'ÎÇôÏ∞∞' && // ÏÉÅÌíàÏù¥ ÎÇôÏ∞∞ ÏÉÅÌÉú
      bid.isWinning === true && // ÎÇ¥Í∞Ä ÎÇôÏ∞∞Ìïú Í≤ΩÏö∞
      !bid.paidAt // ÏïÑÏßÅ Í≤∞Ï†ú ÏïàÌï®
    )
  }

  // ÏûîÏï° ÌôïÏù∏
  const checkBalance = async (bidAmount: number) => {
    try {
      const cashInfo = await cashApi.getMyCash()
      if (cashInfo.success && cashInfo.data) {
        const balance = cashInfo.data.balance || 0
        if (balance < bidAmount) {
          const shouldGoToWallet = confirm(
            `ÏûîÏï°Ïù¥ Î∂ÄÏ°±Ìï©ÎãàÎã§.\nÌòÑÏû¨ ÏûîÏï°: ${balance.toLocaleString()}Ïõê\nÌïÑÏöî Í∏àÏï°: ${bidAmount.toLocaleString()}Ïõê\n\nÏßÄÍ∞ëÏùÑ Ï∂©Ï†ÑÌïòÏãúÍ≤†ÏäµÎãàÍπå?`,
          )
          if (shouldGoToWallet) {
            router.push('/wallet')
          }
          return false
        }
        return true
      }
      return false
    } catch (error: any) {
      console.error('ÏûîÏï° ÌôïÏù∏ Ïã§Ìå®:', error)

      // ÏßÄÍ∞ëÏù¥ ÏÉùÏÑ±ÎêòÏßÄ ÏïäÏùÄ Í≤ΩÏö∞
      if (error.response?.status === 404) {
        const shouldGoToWallet = confirm(
          'ÏûîÏï°Ïù¥ ÏóÜÏäµÎãàÎã§.\nÏûîÏï°ÏùÑ Ï∂©Ï†ÑÌïòÏãúÍ≤†ÏäµÎãàÍπå?',
        )
        if (shouldGoToWallet) {
          router.push('/wallet')
        }
        return false
      }

      alert('ÏûîÏï° ÌôïÏù∏ Ï§ë Ïò§Î•òÍ∞Ä Î∞úÏÉùÌñàÏäµÎãàÎã§.')
      return false
    }
  }

  // ÎÇôÏ∞∞ Í≤∞Ï†ú Ï≤òÎ¶¨
  const handlePayBid = async (bidId: number, bidAmount: number) => {
    setPayingBidId(bidId)
    try {
      const result = await bidApi.payBid(bidId)

      if (result.success) {
        alert(
          `Í≤∞Ï†úÍ∞Ä ÏôÑÎ£åÎêòÏóàÏäµÎãàÎã§!\nÍ∏àÏï°: ${result.data?.amount?.toLocaleString()}Ïõê\nÏûîÏï°: ${result.data?.balanceAfter?.toLocaleString()}Ïõê\n\nÍ±∞ÎûòÎÇ¥Ïó≠ÏùÑ ÌôïÏù∏ÌïòÏãúÍ≤†ÏäµÎãàÍπå?`,
        )

        // UI ÏóÖÎç∞Ïù¥Ìä∏ - ÌéòÏù¥ÏßÄ ÏÉàÎ°úÍ≥†Ïπ®ÏúºÎ°ú ÏµúÏã† Îç∞Ïù¥ÌÑ∞ Í∞ÄÏ†∏Ïò§Í∏∞
        refresh()

        // ÏßÄÍ∞ëÏùò Í±∞ÎûòÎÇ¥Ïó≠ ÌÉ≠ÏúºÎ°ú Ïù¥Îèô
        router.push('/wallet?tab=transactions')
      } else {
        // Í≤∞Ï†ú Ïã§Ìå® Ï≤òÎ¶¨
        if (result.msg?.includes('ÏûîÏï°') || result.msg?.includes('ÏßÄÍ∞ë')) {
          const shouldGoToWallet = confirm(
            `Í≤∞Ï†ú Ïã§Ìå®: ${result.msg}\n\nÏßÄÍ∞ëÏùÑ Ï∂©Ï†ÑÌïòÏãúÍ≤†ÏäµÎãàÍπå?`,
          )
          if (shouldGoToWallet) {
            router.push('/wallet')
          }
        } else {
          alert(`Í≤∞Ï†ú Ïã§Ìå®: ${result.msg}`)
        }
      }
    } catch (error: any) {
      console.error('Í≤∞Ï†ú Ïò§Î•ò:', error)

      // ÏßÄÍ∞ë Í¥ÄÎ†® ÏóêÎü¨ Ï≤òÎ¶¨
      if (
        error.response?.status === 404 ||
        error.message?.includes('ÏßÄÍ∞ëÏù¥ ÏïÑÏßÅ ÏÉùÏÑ±ÎêòÏßÄ ÏïäÏïòÏäµÎãàÎã§')
      ) {
        const shouldGoToWallet = confirm(
          'ÏßÄÍ∞ëÏù¥ ÏïÑÏßÅ ÏÉùÏÑ±ÎêòÏßÄ ÏïäÏïòÏäµÎãàÎã§.\nÏßÄÍ∞ëÏùÑ ÏÉùÏÑ±ÌïòÍ≥† Ï∂©Ï†ÑÌïòÏãúÍ≤†ÏäµÎãàÍπå?',
        )
        if (shouldGoToWallet) {
          router.push('/wallet')
        }
      } else if (
        error.response?.status === 400 &&
        error.response?.data?.msg?.includes('ÏûîÏï°')
      ) {
        const shouldGoToWallet = confirm(
          `Í≤∞Ï†ú Ïã§Ìå®: ${error.response.data.msg}\n\nÏßÄÍ∞ëÏùÑ Ï∂©Ï†ÑÌïòÏãúÍ≤†ÏäµÎãàÍπå?`,
        )
        if (shouldGoToWallet) {
          router.push('/wallet')
        }
      } else {
        alert('Í≤∞Ï†ú Ï§ë Ïò§Î•òÍ∞Ä Î∞úÏÉùÌñàÏäµÎãàÎã§.')
      }
    } finally {
      setPayingBidId(null)
    }
  }

  // ÏôÑÏ†ÑÌïú Í≤∞Ï†ú ÌîåÎ°úÏö∞
  const completePaymentFlow = async (bidId: number, bidAmount: number) => {
    // 1. ÏûîÏï° ÌôïÏù∏
    const hasEnoughBalance = await checkBalance(bidAmount)
    if (!hasEnoughBalance) return

    // 2. ÏÇ¨Ïö©Ïûê ÌôïÏù∏
    const confirmed = confirm(
      `Ï†ïÎßêÎ°ú ${bidAmount.toLocaleString()}ÏõêÏùÑ Í≤∞Ï†úÌïòÏãúÍ≤†ÏäµÎãàÍπå?`,
    )
    if (!confirmed) return

    // 3. Í≤∞Ï†ú Ï≤òÎ¶¨
    await handlePayBid(bidId, bidAmount)
  }

  return (
    <div className="mx-auto max-w-4xl px-4 py-6 sm:px-6 lg:px-8">
      {/* API ÏóêÎü¨ Î©îÏãúÏßÄ */}
      {apiError && (
        <ErrorAlert
          title="Ïò§Î•ò"
          message={apiError}
          onClose={() => setApiError('')}
        />
      )}

      {/* ÌéòÏù¥ÏßÄ Ìó§Îçî */}
      <div className="mb-8">
        <h1 className="text-2xl font-bold text-neutral-900">ÏûÖÏ∞∞ ÎÇ¥Ïó≠</h1>
        <p className="mt-2 text-neutral-600">
          {activeTab === 'bids'
            ? `Ï¥ù ${totalElements || transformedBids.length}Í∞úÏùò ÏûÖÏ∞∞ ÎÇ¥Ïó≠Ïù¥ ÏûàÏäµÎãàÎã§`
            : `Ï¥ù ${paymentTotalElements || 0}Í∞úÏùò ÏûÖÏ∞∞ ÏôÑÎ£å ÎÇ¥Ïó≠Ïù¥ ÏûàÏäµÎãàÎã§`}
        </p>
      </div>

      {/* ÌÉ≠ ÎÑ§ÎπÑÍ≤åÏù¥ÏÖò */}
      <div className="mb-8">
        <div className="border-b border-neutral-200">
          <nav className="-mb-px flex space-x-8">
            <button
              onClick={() => handleTabChange('bids')}
              className={`border-b-2 px-1 py-2 text-sm font-medium ${
                activeTab === 'bids'
                  ? 'border-blue-500 text-blue-600'
                  : 'border-transparent text-neutral-500 hover:border-neutral-300 hover:text-neutral-700'
              }`}
            >
              <div className="flex items-center space-x-2">
                <span>üéØ</span>
                <span>ÏûÖÏ∞∞ ÎÇ¥Ïó≠</span>
                <span className="ml-2 rounded-full bg-neutral-100 px-2 py-1 text-xs">
                  {totalElements || transformedBids.length}
                </span>
              </div>
            </button>
            <button
              onClick={() => handleTabChange('payments')}
              className={`border-b-2 px-1 py-2 text-sm font-medium ${
                activeTab === 'payments'
                  ? 'border-blue-500 text-blue-600'
                  : 'border-transparent text-neutral-500 hover:border-neutral-300 hover:text-neutral-700'
              }`}
            >
              <div className="flex items-center space-x-2">
                <span>üí≥</span>
                <span>ÏûÖÏ∞∞ ÏôÑÎ£å ÎÇ¥Ïó≠</span>
                <span className="ml-2 rounded-full bg-neutral-100 px-2 py-1 text-xs">
                  {paymentTotalElements}
                </span>
              </div>
            </button>
          </nav>
        </div>
      </div>

      {/* ÌÉ≠ ÎÇ¥Ïö© */}
      {activeTab === 'bids' && (
        <div className="space-y-6">
          {isLoading ? (
            <Card variant="outlined" className="w-full">
              <CardContent className="py-16 text-center">
                <div className="mb-6">
                  <div className="border-primary-200 border-t-primary-600 mx-auto mb-4 h-8 w-8 animate-spin rounded-full border-4"></div>
                  <h3 className="text-lg font-semibold text-neutral-900">
                    ÏûÖÏ∞∞ ÎÇ¥Ïó≠ÏùÑ Î∂àÎü¨Ïò§Îäî Ï§ë...
                  </h3>
                </div>
              </CardContent>
            </Card>
          ) : transformedBids.length === 0 ? (
            <Card variant="outlined" className="w-full">
              <CardContent className="py-16 text-center">
                <div className="mb-6">
                  <div className="mx-auto mb-4 flex h-20 w-20 items-center justify-center rounded-full bg-neutral-100">
                    <span className="text-3xl">üéØ</span>
                  </div>
                  <h3 className="mb-2 text-xl font-semibold text-neutral-900">
                    ÏûÖÏ∞∞ ÎÇ¥Ïó≠Ïù¥ ÏóÜÏäµÎãàÎã§
                  </h3>
                  <p className="mb-6 text-neutral-600">
                    Ï≤´ Î≤àÏß∏ Í≤ΩÎß§Ïóê Ï∞∏Ïó¨Ìï¥Î≥¥ÏÑ∏Ïöî!
                  </p>
                  <div className="space-x-3">
                    <Button onClick={() => router.push('/')} size="lg">
                      Í≤ΩÎß§ ÎëòÎü¨Î≥¥Í∏∞
                    </Button>
                  </div>
                </div>
              </CardContent>
            </Card>
          ) : (
            <>
              {transformedBids.map((bid: any) => {
                const statusInfo = getStatusInfo(bid)

                return (
                  <Card
                    key={bid.bidId}
                    variant="outlined"
                    className="transition-shadow hover:shadow-lg"
                  >
                    <CardContent className="p-6">
                      <div className="flex items-start space-x-6">
                        {/* ÏÉÅÌíà Ïù¥ÎØ∏ÏßÄ */}
                        <div className="flex-shrink-0">
                          <div
                            className="h-24 w-24 cursor-pointer rounded-lg bg-neutral-200 transition-transform hover:scale-105"
                            onClick={() =>
                              router.push(`/products/${bid.productId}`)
                            }
                            title="ÏÉÅÌíà ÏÉÅÏÑ∏Î≥¥Í∏∞"
                          >
                            {bid.thumbnailUrl ? (
                              <img
                                src={bid.thumbnailUrl}
                                alt={bid.productName}
                                className="h-24 w-24 rounded-lg object-cover"
                              />
                            ) : (
                              <div className="flex h-24 w-24 items-center justify-center rounded-lg bg-neutral-200">
                                <span className="text-neutral-400">üì¶</span>
                              </div>
                            )}
                          </div>
                        </div>

                        {/* ÏûÖÏ∞∞ Ï†ïÎ≥¥ */}
                        <div className="min-w-0 flex-1">
                          <div className="mb-2 flex items-center space-x-2">
                            <div
                              className={`inline-flex items-center rounded-full px-3 py-1 text-sm font-medium ${statusInfo.bgColor} ${statusInfo.color}`}
                            >
                              <span className="mr-1">{statusInfo.icon}</span>
                              {statusInfo.label}
                            </div>
                          </div>

                          <h3
                            className="mb-2 flex cursor-pointer items-center gap-2 text-lg font-semibold text-neutral-900 transition-colors hover:text-blue-600"
                            onClick={() =>
                              router.push(`/products/${bid.productId}`)
                            }
                            title="ÏÉÅÌíà ÏÉÅÏÑ∏Î≥¥Í∏∞"
                          >
                            {bid.productName}
                            <ExternalLink className="h-4 w-4" />
                          </h3>

                          <div className="mb-3 grid grid-cols-1 gap-2 text-sm text-neutral-600 sm:grid-cols-2">
                            <div className="flex items-center space-x-2">
                              <span className="w-20 text-neutral-500">
                                ÎÇ¥ ÏûÖÏ∞∞Í∞Ä:
                              </span>
                              <span className="text-primary-600 font-semibold">
                                {formatPrice(bid.myBidPrice)}
                              </span>
                            </div>
                            <div className="flex items-center space-x-2">
                              <span className="w-20 text-neutral-500">
                                ÌòÑÏû¨Í∞Ä:
                              </span>
                              <span>{formatPrice(bid.currentPrice)}</span>
                            </div>
                            <div className="flex items-center space-x-2">
                              <span className="w-20 text-neutral-500">
                                ÏûÖÏ∞∞ ÏãúÍ∞Ñ:
                              </span>
                              <span>{formatDate(bid.bidTime)}</span>
                            </div>
                            <div className="flex items-center space-x-2">
                              <span className="w-20 text-neutral-500">
                                Ï¢ÖÎ£å ÏãúÍ∞Ñ:
                              </span>
                              <span>{formatDate(bid.endTime)}</span>
                            </div>
                            <div className="flex items-center space-x-2 sm:col-span-2">
                              <span className="w-20 text-neutral-500">
                                ÏÉÅÌíà ÏÉÅÌÉú:
                              </span>
                              <span>{bid.productStatus}</span>
                            </div>
                          </div>

                          {bid.isWinning &&
                            bid.status === 'BIDDING' &&
                            bid.productStatus !== 'ÎÇôÏ∞∞' && (
                              <div className="bg-primary-50 mb-4 rounded-lg p-3">
                                <div className="text-primary-900 mb-2 text-sm font-medium">
                                  üèÜ ÌòÑÏû¨ ÏµúÍ≥†Í∞Ä ÏûÖÏ∞∞ÏûêÏûÖÎãàÎã§!
                                </div>
                                <p className="text-primary-700 text-sm">
                                  Í≤ΩÎß§ Ï¢ÖÎ£åÍπåÏßÄ Í∏∞Îã§Î†§Ï£ºÏÑ∏Ïöî.
                                </p>
                              </div>
                            )}

                          {bid.productStatus === 'ÎÇôÏ∞∞' &&
                            bid.isWinning === true &&
                            !bid.paidAt && (
                              <div className="mb-4 rounded-lg border-2 border-yellow-200 bg-yellow-50 p-4">
                                <div className="mb-2 text-sm font-bold text-yellow-900">
                                  üéâ ÎÇôÏ∞∞ ÏÑ±Í≥µ! Í≤∞Ï†úÎ•º ÏßÑÌñâÌï¥Ï£ºÏÑ∏Ïöî
                                </div>
                                <p className="text-sm text-yellow-800">
                                  {formatPrice(bid.myBidPrice)}ÏùÑ Í≤∞Ï†úÌïòÏó¨
                                  Í±∞ÎûòÎ•º ÏôÑÎ£åÌïòÏÑ∏Ïöî.
                                </p>
                              </div>
                            )}

                          {bid.productStatus === 'ÎÇôÏ∞∞' &&
                            bid.isWinning === true &&
                            bid.paidAt && (
                              <div className="mb-4 rounded-lg border-2 border-blue-200 bg-blue-50 p-4">
                                <div className="mb-2 text-sm font-bold text-blue-900">
                                  ‚úÖ Í≤∞Ï†ú ÏôÑÎ£å!
                                </div>
                                <p className="text-sm text-blue-800">
                                  Í≤∞Ï†úÍ∞Ä ÏôÑÎ£åÎêòÏóàÏäµÎãàÎã§. ÌåêÎß§ÏûêÏôÄ Ïó∞ÎùΩÌïòÏó¨
                                  ÏÉÅÌíàÏùÑ Î∞õÏïÑÎ≥¥ÏÑ∏Ïöî.
                                </p>
                              </div>
                            )}

                          {/* Ïï°ÏÖò Î≤ÑÌäºÎì§ */}
                          <div className="flex flex-wrap gap-2">
                            {bid.productStatus === 'ÎÇôÏ∞∞' && (
                              <>
                                {canPayBid(bid) ? (
                                  <Button
                                    size="md"
                                    onClick={() =>
                                      completePaymentFlow(
                                        bid.bidId,
                                        bid.myBidPrice,
                                      )
                                    }
                                    disabled={payingBidId === bid.bidId}
                                    className="bg-green-600 font-bold text-white shadow-lg hover:bg-green-700"
                                  >
                                    {payingBidId === bid.bidId
                                      ? 'Í≤∞Ï†ú Ï§ë...'
                                      : 'üí≥ Í≤∞Ï†úÌïòÍ∏∞'}
                                  </Button>
                                ) : bid.isWinning === true && bid.paidAt ? (
                                  <>
                                    <Button
                                      size="md"
                                      variant="outline"
                                      disabled
                                      className="font-bold"
                                    >
                                      ‚úÖ Í≤∞Ï†ú ÏôÑÎ£å
                                    </Button>
                                    <Button
                                      size="md"
                                      onClick={() =>
                                        router.push(
                                          `/products/${bid.productId}?tab=reviews&action=write`,
                                        )
                                      }
                                      className="bg-yellow-500 font-bold text-white hover:bg-yellow-600"
                                    >
                                      <StarIcon className="mr-1 h-4 w-4" />
                                      Î¶¨Î∑∞ ÏûëÏÑ±
                                    </Button>
                                  </>
                                ) : null}
                              </>
                            )}
                            {bid.status === 'BIDDING' &&
                              bid.productStatus !== 'ÎÇôÏ∞∞' && (
                                <>
                                  <Button
                                    size="md"
                                    onClick={() =>
                                      router.push(`/products/${bid.productId}`)
                                    }
                                  >
                                    Ïû¨ÏûÖÏ∞∞ÌïòÍ∏∞
                                  </Button>
                                </>
                              )}
                            {bid.status === 'LOSING' && (
                              <>
                                <Button size="sm">ÎπÑÏä∑Ìïú ÏÉÅÌíà Ï∞æÍ∏∞</Button>
                                <Button size="sm" variant="outline">
                                  Í¥ÄÏã¨ ÏÉÅÌíà Îì±Î°ù
                                </Button>
                              </>
                            )}
                          </div>
                        </div>
                      </div>
                    </CardContent>
                  </Card>
                )
              })}

              {/* ÌéòÏù¥ÏßÄÎÑ§Ïù¥ÏÖò UI */}
              <div className="mt-8 space-y-4">
                {/* ÌéòÏù¥ÏßÄ Ï†ïÎ≥¥ Î∞è ÌéòÏù¥ÏßÄ ÌÅ¨Í∏∞ ÏÑ†ÌÉù */}
                <div className="flex flex-col items-center justify-between space-y-4 sm:flex-row sm:space-y-0">
                  <PaginationInfo
                    currentPage={currentPage}
                    totalPages={totalPages}
                    totalElements={totalElements}
                    pageSize={pageSize}
                  />
                  <PageSizeSelector
                    pageSize={pageSize}
                    onPageSizeChange={handlePageSizeChange}
                    options={[5, 10, 20]}
                  />
                </div>

                {/* ÌéòÏù¥ÏßÄÎÑ§Ïù¥ÏÖò Ïª®Ìä∏Î°§ */}
                {totalPages > 0 && (
                  <Pagination
                    currentPage={currentPage}
                    totalPages={totalPages}
                    onPageChange={goToPage}
                    hasNext={hasNext}
                    hasPrevious={hasPrevious}
                    isLoading={isLoading}
                  />
                )}
              </div>
            </>
          )}
        </div>
      )}

      {/* Í≤∞Ï†ú ÎÇ¥Ïó≠ ÌÉ≠ - ÏûÑÏãú ÎπÑÌôúÏÑ±Ìôî */}
      {activeTab === 'payments' && (
        <div className="space-y-6">
          <Card variant="outlined" className="w-full">
            <CardContent className="py-16 text-center">
              <div className="mb-6">
                <div className="mx-auto mb-4 flex h-20 w-20 items-center justify-center rounded-full bg-neutral-100">
                  <span className="text-3xl">üöß</span>
                </div>
                <h3 className="mb-2 text-xl font-semibold text-neutral-900">
                  Ï§ÄÎπÑ Ï§ë
                </h3>
                <p className="mb-6 text-neutral-600">
                  Ïó¥Ïã¨Ìûà Í∞úÎ∞úÏ§ëÏûÖÎãàÎã§.
                  <br />Í≥ß ÎßåÎÇòÎ≥¥Ïã§ Ïàò ÏûàÏäµÎãàÎã§!
                </p>
              </div>
            </CardContent>
          </Card>
        </div>
      )}
    </div>
  )
}
